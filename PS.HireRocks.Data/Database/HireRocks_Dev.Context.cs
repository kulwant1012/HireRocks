//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PS.HireRocks.Data.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Capture> Captures { get; set; }
        public virtual DbSet<Certification> Certifications { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ContractDenyReason> ContractDenyReasons { get; set; }
        public virtual DbSet<ContractEndReason> ContractEndReasons { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractStatu> ContractStatus { get; set; }
        public virtual DbSet<DegreeType> DegreeTypes { get; set; }
        public virtual DbSet<Education> Educations { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<ExperienceLevel> ExperienceLevels { get; set; }
        public virtual DbSet<JobAttachment> JobAttachments { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobsBidAttachment> JobsBidAttachments { get; set; }
        public virtual DbSet<JobsBid> JobsBids { get; set; }
        public virtual DbSet<JobSubCategory> JobSubCategories { get; set; }
        public virtual DbSet<JobType> JobTypes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LicenseAgreement> LicenseAgreements { get; set; }
        public virtual DbSet<MessageLabel> MessageLabels { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<ReadyMadeTool> ReadyMadeTools { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TimeSheet> TimeSheets { get; set; }
        public virtual DbSet<TimeUnit> TimeUnits { get; set; }
        public virtual DbSet<TransactionStatu> TransactionStatus { get; set; }
        public virtual DbSet<UserPortfolio> UserPortfolios { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserRating> UserRatings { get; set; }
        public virtual DbSet<WorkerHourlyRate> WorkerHourlyRates { get; set; }
        public virtual DbSet<WorkerType> WorkerTypes { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<Memo> Memos { get; set; }
        public virtual DbSet<UserAccountType> UserAccountTypes { get; set; }
    
        public virtual int ApplyJob(Nullable<long> jobId, Nullable<decimal> rate, string workerId, string applyJobAttachments, string coverLetter, string workerName)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("jobId", jobId) :
                new ObjectParameter("jobId", typeof(long));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var applyJobAttachmentsParameter = applyJobAttachments != null ?
                new ObjectParameter("ApplyJobAttachments", applyJobAttachments) :
                new ObjectParameter("ApplyJobAttachments", typeof(string));
    
            var coverLetterParameter = coverLetter != null ?
                new ObjectParameter("CoverLetter", coverLetter) :
                new ObjectParameter("CoverLetter", typeof(string));
    
            var workerNameParameter = workerName != null ?
                new ObjectParameter("WorkerName", workerName) :
                new ObjectParameter("WorkerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplyJob", jobIdParameter, rateParameter, workerIdParameter, applyJobAttachmentsParameter, coverLetterParameter, workerNameParameter);
        }
    
        public virtual int ApproveContract(Nullable<long> contractId, string modifiedByUserId, Nullable<long> jobId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var modifiedByUserIdParameter = modifiedByUserId != null ?
                new ObjectParameter("ModifiedByUserId", modifiedByUserId) :
                new ObjectParameter("ModifiedByUserId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveContract", contractIdParameter, modifiedByUserIdParameter, jobIdParameter);
        }
    
        public virtual int DeleteCapture(string captureIdsToDelete)
        {
            var captureIdsToDeleteParameter = captureIdsToDelete != null ?
                new ObjectParameter("CaptureIdsToDelete", captureIdsToDelete) :
                new ObjectParameter("CaptureIdsToDelete", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCapture", captureIdsToDeleteParameter);
        }
    
        public virtual int DeleteNotificationById(Nullable<long> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNotificationById", notificationIdParameter);
        }
    
        public virtual ObjectResult<FindJobsByFilter_Result> FindJobsByFilter(string jobTitle, Nullable<long> jobCategoryId, string jobSubCategoryIds, Nullable<long> jobTypeId, Nullable<long> experienceLevelRequiredId, string workerId)
        {
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var jobCategoryIdParameter = jobCategoryId.HasValue ?
                new ObjectParameter("JobCategoryId", jobCategoryId) :
                new ObjectParameter("JobCategoryId", typeof(long));
    
            var jobSubCategoryIdsParameter = jobSubCategoryIds != null ?
                new ObjectParameter("JobSubCategoryIds", jobSubCategoryIds) :
                new ObjectParameter("JobSubCategoryIds", typeof(string));
    
            var jobTypeIdParameter = jobTypeId.HasValue ?
                new ObjectParameter("JobTypeId", jobTypeId) :
                new ObjectParameter("JobTypeId", typeof(long));
    
            var experienceLevelRequiredIdParameter = experienceLevelRequiredId.HasValue ?
                new ObjectParameter("ExperienceLevelRequiredId", experienceLevelRequiredId) :
                new ObjectParameter("ExperienceLevelRequiredId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindJobsByFilter_Result>("FindJobsByFilter", jobTitleParameter, jobCategoryIdParameter, jobSubCategoryIdsParameter, jobTypeIdParameter, experienceLevelRequiredIdParameter, workerIdParameter);
        }
    
        public virtual ObjectResult<FindWorkersByFilter_Result> FindWorkersByFilter(string workerName, Nullable<decimal> hourlyRate, Nullable<decimal> rating, string timeZone, string countryName, string skillIds)
        {
            var workerNameParameter = workerName != null ?
                new ObjectParameter("WorkerName", workerName) :
                new ObjectParameter("WorkerName", typeof(string));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(decimal));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var skillIdsParameter = skillIds != null ?
                new ObjectParameter("SkillIds", skillIds) :
                new ObjectParameter("SkillIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindWorkersByFilter_Result>("FindWorkersByFilter", workerNameParameter, hourlyRateParameter, ratingParameter, timeZoneParameter, countryNameParameter, skillIdsParameter);
        }
    
        [DbFunction("Entities", "FunctionSplitString")]
        public virtual IQueryable<string> FunctionSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Entities].[FunctionSplitString](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<GetAllContractsByWorkerIdAndClientId_Result> GetAllContractsByWorkerIdAndClientId(string workerId, string clientId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllContractsByWorkerIdAndClientId_Result>("GetAllContractsByWorkerIdAndClientId", workerIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<GetAllContractStatus_Result> GetAllContractStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllContractStatus_Result>("GetAllContractStatus");
        }
    
        public virtual ObjectResult<GetAllDegreeTypes_Result> GetAllDegreeTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDegreeTypes_Result>("GetAllDegreeTypes");
        }
    
        public virtual ObjectResult<GetAllExperienceLevels_Result> GetAllExperienceLevels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllExperienceLevels_Result>("GetAllExperienceLevels");
        }
    
        public virtual ObjectResult<GetAllJobCategories_Result> GetAllJobCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllJobCategories_Result>("GetAllJobCategories");
        }
    
        public virtual ObjectResult<GetAllJobSubCategories_Result> GetAllJobSubCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllJobSubCategories_Result>("GetAllJobSubCategories");
        }
    
        public virtual ObjectResult<GetAllJobTypes_Result> GetAllJobTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllJobTypes_Result>("GetAllJobTypes");
        }
    
        public virtual ObjectResult<GetAllLanguages_Result> GetAllLanguages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLanguages_Result>("GetAllLanguages");
        }
    
        public virtual ObjectResult<GetAllPaymentMethods_Result> GetAllPaymentMethods()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPaymentMethods_Result>("GetAllPaymentMethods");
        }
    
        public virtual ObjectResult<GetAllSkills_Result> GetAllSkills()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSkills_Result>("GetAllSkills");
        }
    
        public virtual ObjectResult<GetAllTimeUnits_Result> GetAllTimeUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTimeUnits_Result>("GetAllTimeUnits");
        }
    
        public virtual ObjectResult<GetAllWorkerTypes_Result> GetAllWorkerTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllWorkerTypes_Result>("GetAllWorkerTypes");
        }
    
        public virtual ObjectResult<GetBurnedHoursInformation_Result> GetBurnedHoursInformation(Nullable<long> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBurnedHoursInformation_Result>("GetBurnedHoursInformation", contractIdParameter);
        }
    
        [DbFunction("Entities", "GetBurnedHoursInformationFunction")]
        public virtual IQueryable<GetBurnedHoursInformationFunction_Result> GetBurnedHoursInformationFunction(Nullable<long> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBurnedHoursInformationFunction_Result>("[Entities].[GetBurnedHoursInformationFunction](@ContractId)", contractIdParameter);
        }
    
        public virtual ObjectResult<GetCapturesForClientReview_Result> GetCapturesForClientReview(string workerId, Nullable<long> jobId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isRejected)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRejectedParameter = isRejected.HasValue ?
                new ObjectParameter("IsRejected", isRejected) :
                new ObjectParameter("IsRejected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapturesForClientReview_Result>("GetCapturesForClientReview", workerIdParameter, jobIdParameter, fromDateParameter, toDateParameter, isRejectedParameter);
        }
    
        public virtual ObjectResult<GetCapturesScreenData_Result> GetCapturesScreenData(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapturesScreenData_Result>("GetCapturesScreenData", jobIdParameter);
        }
    
        public virtual ObjectResult<GetCertificationsByUserId_Result> GetCertificationsByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCertificationsByUserId_Result>("GetCertificationsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetClientInfoByJobId_Result> GetClientInfoByJobId(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientInfoByJobId_Result>("GetClientInfoByJobId", jobIdParameter);
        }
    
        public virtual ObjectResult<GetClientTeam_Result> GetClientTeam(string clientId, Nullable<long> jobId, Nullable<bool> showActiveWorkers)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var showActiveWorkersParameter = showActiveWorkers.HasValue ?
                new ObjectParameter("ShowActiveWorkers", showActiveWorkers) :
                new ObjectParameter("ShowActiveWorkers", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientTeam_Result>("GetClientTeam", clientIdParameter, jobIdParameter, showActiveWorkersParameter);
        }
    
        public virtual int GetCompleteProfileScreenData(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompleteProfileScreenData", roleIdParameter);
        }
    
        public virtual ObjectResult<GetContractByContractId_Result> GetContractByContractId(Nullable<long> contractId, string clientId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractByContractId_Result>("GetContractByContractId", contractIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<GetContractByContractIdOrWorkerAndJobId_Result> GetContractByContractIdOrWorkerAndJobId(Nullable<long> contractId, string workerId, Nullable<long> jobId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractByContractIdOrWorkerAndJobId_Result>("GetContractByContractIdOrWorkerAndJobId", contractIdParameter, workerIdParameter, jobIdParameter);
        }
    
        public virtual ObjectResult<GetContractDenyReasonsByRoleId_Result> GetContractDenyReasonsByRoleId(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractDenyReasonsByRoleId_Result>("GetContractDenyReasonsByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<GetContractEndReasonsByRoleId_Result> GetContractEndReasonsByRoleId(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractEndReasonsByRoleId_Result>("GetContractEndReasonsByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<GetContractForReviewByContractId_Result> GetContractForReviewByContractId(Nullable<long> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractForReviewByContractId_Result>("GetContractForReviewByContractId", contractIdParameter);
        }
    
        public virtual int GetContractForWorker(string workerId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContractForWorker", workerIdParameter);
        }
    
        public virtual ObjectResult<GetEducationDetailsByUserId_Result> GetEducationDetailsByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEducationDetailsByUserId_Result>("GetEducationDetailsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetJobAttachments_Result> GetJobAttachments(string jobIds)
        {
            var jobIdsParameter = jobIds != null ?
                new ObjectParameter("JobIds", jobIds) :
                new ObjectParameter("JobIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobAttachments_Result>("GetJobAttachments", jobIdsParameter);
        }
    
        public virtual ObjectResult<GetJobAttachmentsByJobId_Result> GetJobAttachmentsByJobId(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobAttachmentsByJobId_Result>("GetJobAttachmentsByJobId", jobIdParameter);
        }
    
        public virtual ObjectResult<GetJobBidById_Result> GetJobBidById(Nullable<long> jobBidId)
        {
            var jobBidIdParameter = jobBidId.HasValue ?
                new ObjectParameter("JobBidId", jobBidId) :
                new ObjectParameter("JobBidId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobBidById_Result>("GetJobBidById", jobBidIdParameter);
        }
    
        public virtual ObjectResult<GetJobByJobId_Result> GetJobByJobId(Nullable<long> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobByJobId_Result>("GetJobByJobId", jobIdParameter);
        }
    
        public virtual ObjectResult<GetJobByJobIdAndClientId_Result> GetJobByJobIdAndClientId(Nullable<long> jobId, string clientId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobByJobIdAndClientId_Result>("GetJobByJobIdAndClientId", jobIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<GetJobCapturesByContractId_Result> GetJobCapturesByContractId(Nullable<long> contractId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobCapturesByContractId_Result>("GetJobCapturesByContractId", contractIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetJobListForHireWorkerScreen_Result> GetJobListForHireWorkerScreen(string clientId, string workerId)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobListForHireWorkerScreen_Result>("GetJobListForHireWorkerScreen", clientIdParameter, workerIdParameter);
        }
    
        public virtual ObjectResult<GetJobListForMessageScreen_Result> GetJobListForMessageScreen(string clientId)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobListForMessageScreen_Result>("GetJobListForMessageScreen", clientIdParameter);
        }
    
        public virtual ObjectResult<GetJobsByClientId_Result> GetJobsByClientId(string clientId)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobsByClientId_Result>("GetJobsByClientId", clientIdParameter);
        }
    
        public virtual ObjectResult<GetJobsByWorkerId_Result> GetJobsByWorkerId(string workerId, Nullable<bool> isActive)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobsByWorkerId_Result>("GetJobsByWorkerId", workerIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetJobsForTracker_Result> GetJobsForTracker(string workerId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobsForTracker_Result>("GetJobsForTracker", workerIdParameter);
        }
    
        public virtual ObjectResult<GetLicenseAgreementById_Result> GetLicenseAgreementById(Nullable<long> licenseAgreementId)
        {
            var licenseAgreementIdParameter = licenseAgreementId.HasValue ?
                new ObjectParameter("LicenseAgreementId", licenseAgreementId) :
                new ObjectParameter("LicenseAgreementId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLicenseAgreementById_Result>("GetLicenseAgreementById", licenseAgreementIdParameter);
        }
    
        public virtual ObjectResult<GetManageContractScreenData_Result> GetManageContractScreenData(Nullable<long> contractId, string userId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetManageContractScreenData_Result>("GetManageContractScreenData", contractIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetMessages_Result> GetMessages(Nullable<long> jobId, string workerId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMessages_Result>("GetMessages", jobIdParameter, workerIdParameter);
        }
    
        public virtual ObjectResult<GetNotificationsByUserId_Result> GetNotificationsByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationsByUserId_Result>("GetNotificationsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetTimeLogByClientId_Result> GetTimeLogByClientId(string clientId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeLogByClientId_Result>("GetTimeLogByClientId", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnreadMessageCount(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnreadMessageCount", userIdParameter);
        }
    
        public virtual ObjectResult<GetUnreadNotificationAndMessageCount_Result> GetUnreadNotificationAndMessageCount(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnreadNotificationAndMessageCount_Result>("GetUnreadNotificationAndMessageCount", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnreadNotificationsCount(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnreadNotificationsCount", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserById_Result> GetUserById(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserById_Result>("GetUserById", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserEducations_Result> GetUserEducations(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserEducations_Result>("GetUserEducations", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserProfileByUserId_Result> GetUserProfileByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProfileByUserId_Result>("GetUserProfileByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetWorkerJobListForMessageScreen_Result> GetWorkerJobListForMessageScreen(string workerId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerJobListForMessageScreen_Result>("GetWorkerJobListForMessageScreen", workerIdParameter);
        }
    
        public virtual ObjectResult<GetWorkerJobsByWorkerId_Result> GetWorkerJobsByWorkerId(string workerId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerJobsByWorkerId_Result>("GetWorkerJobsByWorkerId", workerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetWorkerRate(string workerId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetWorkerRate", workerIdParameter);
        }
    
        public virtual ObjectResult<GetWorkersBidForJob_Result> GetWorkersBidForJob(Nullable<long> jobId, string clientId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkersBidForJob_Result>("GetWorkersBidForJob", jobIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<GetWorkersForMessageScreen_Result> GetWorkersForMessageScreen(Nullable<long> jobId, string workerId, string clientId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkersForMessageScreen_Result>("GetWorkersForMessageScreen", jobIdParameter, workerIdParameter, clientIdParameter);
        }
    
        public virtual int InsertAccountType(Nullable<int> userAccountTypeId, string userId)
        {
            var userAccountTypeIdParameter = userAccountTypeId.HasValue ?
                new ObjectParameter("UserAccountTypeId", userAccountTypeId) :
                new ObjectParameter("UserAccountTypeId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAccountType", userAccountTypeIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<InsertCapture_Result> InsertCapture(Nullable<long> contractId, Nullable<int> keyCount, Nullable<int> mouseCount, string keyboardCapture, string mouseCapture, string screenCaptureThumbnailImage, string screenCaptureFullImage, Nullable<System.DateTime> captureDate, Nullable<decimal> timeBurned)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var keyCountParameter = keyCount.HasValue ?
                new ObjectParameter("KeyCount", keyCount) :
                new ObjectParameter("KeyCount", typeof(int));
    
            var mouseCountParameter = mouseCount.HasValue ?
                new ObjectParameter("MouseCount", mouseCount) :
                new ObjectParameter("MouseCount", typeof(int));
    
            var keyboardCaptureParameter = keyboardCapture != null ?
                new ObjectParameter("KeyboardCapture", keyboardCapture) :
                new ObjectParameter("KeyboardCapture", typeof(string));
    
            var mouseCaptureParameter = mouseCapture != null ?
                new ObjectParameter("MouseCapture", mouseCapture) :
                new ObjectParameter("MouseCapture", typeof(string));
    
            var screenCaptureThumbnailImageParameter = screenCaptureThumbnailImage != null ?
                new ObjectParameter("ScreenCaptureThumbnailImage", screenCaptureThumbnailImage) :
                new ObjectParameter("ScreenCaptureThumbnailImage", typeof(string));
    
            var screenCaptureFullImageParameter = screenCaptureFullImage != null ?
                new ObjectParameter("ScreenCaptureFullImage", screenCaptureFullImage) :
                new ObjectParameter("ScreenCaptureFullImage", typeof(string));
    
            var captureDateParameter = captureDate.HasValue ?
                new ObjectParameter("CaptureDate", captureDate) :
                new ObjectParameter("CaptureDate", typeof(System.DateTime));
    
            var timeBurnedParameter = timeBurned.HasValue ?
                new ObjectParameter("TimeBurned", timeBurned) :
                new ObjectParameter("TimeBurned", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCapture_Result>("InsertCapture", contractIdParameter, keyCountParameter, mouseCountParameter, keyboardCaptureParameter, mouseCaptureParameter, screenCaptureThumbnailImageParameter, screenCaptureFullImageParameter, captureDateParameter, timeBurnedParameter);
        }
    
        public virtual int InsertMemo(Nullable<long> jobId, string memoText)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var memoTextParameter = memoText != null ?
                new ObjectParameter("MemoText", memoText) :
                new ObjectParameter("MemoText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMemo", jobIdParameter, memoTextParameter);
        }
    
        public virtual int InsertMessage(Nullable<long> jobId, string messageText, string messageFromUserId, string messageToUserId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            var messageFromUserIdParameter = messageFromUserId != null ?
                new ObjectParameter("MessageFromUserId", messageFromUserId) :
                new ObjectParameter("MessageFromUserId", typeof(string));
    
            var messageToUserIdParameter = messageToUserId != null ?
                new ObjectParameter("MessageToUserId", messageToUserId) :
                new ObjectParameter("MessageToUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMessage", jobIdParameter, messageTextParameter, messageFromUserIdParameter, messageToUserIdParameter);
        }
    
        public virtual ObjectResult<InsertUpdateContract_Result> InsertUpdateContract(Nullable<long> contractId, string workerId, Nullable<long> jobId, Nullable<decimal> hourlyRate, Nullable<decimal> fixedRate, Nullable<decimal> estimatedDuration, Nullable<decimal> weeklyHourLimit, Nullable<long> timeUnitId, Nullable<long> contractStatusId, Nullable<System.DateTime> endDate, string endReason, string createdModifiedByUserId, Nullable<bool> isEndingContract, Nullable<long> userRatingId, Nullable<decimal> skill, Nullable<decimal> quality, Nullable<decimal> availability, Nullable<decimal> deadline, Nullable<decimal> communication, Nullable<decimal> cooperation, string comment, string userId, Nullable<System.DateTime> hourlyRateDateFromOrTo)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var fixedRateParameter = fixedRate.HasValue ?
                new ObjectParameter("FixedRate", fixedRate) :
                new ObjectParameter("FixedRate", typeof(decimal));
    
            var estimatedDurationParameter = estimatedDuration.HasValue ?
                new ObjectParameter("EstimatedDuration", estimatedDuration) :
                new ObjectParameter("EstimatedDuration", typeof(decimal));
    
            var weeklyHourLimitParameter = weeklyHourLimit.HasValue ?
                new ObjectParameter("WeeklyHourLimit", weeklyHourLimit) :
                new ObjectParameter("WeeklyHourLimit", typeof(decimal));
    
            var timeUnitIdParameter = timeUnitId.HasValue ?
                new ObjectParameter("TimeUnitId", timeUnitId) :
                new ObjectParameter("TimeUnitId", typeof(long));
    
            var contractStatusIdParameter = contractStatusId.HasValue ?
                new ObjectParameter("ContractStatusId", contractStatusId) :
                new ObjectParameter("ContractStatusId", typeof(long));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var endReasonParameter = endReason != null ?
                new ObjectParameter("EndReason", endReason) :
                new ObjectParameter("EndReason", typeof(string));
    
            var createdModifiedByUserIdParameter = createdModifiedByUserId != null ?
                new ObjectParameter("CreatedModifiedByUserId", createdModifiedByUserId) :
                new ObjectParameter("CreatedModifiedByUserId", typeof(string));
    
            var isEndingContractParameter = isEndingContract.HasValue ?
                new ObjectParameter("IsEndingContract", isEndingContract) :
                new ObjectParameter("IsEndingContract", typeof(bool));
    
            var userRatingIdParameter = userRatingId.HasValue ?
                new ObjectParameter("UserRatingId", userRatingId) :
                new ObjectParameter("UserRatingId", typeof(long));
    
            var skillParameter = skill.HasValue ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(decimal));
    
            var qualityParameter = quality.HasValue ?
                new ObjectParameter("Quality", quality) :
                new ObjectParameter("Quality", typeof(decimal));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(decimal));
    
            var deadlineParameter = deadline.HasValue ?
                new ObjectParameter("Deadline", deadline) :
                new ObjectParameter("Deadline", typeof(decimal));
    
            var communicationParameter = communication.HasValue ?
                new ObjectParameter("Communication", communication) :
                new ObjectParameter("Communication", typeof(decimal));
    
            var cooperationParameter = cooperation.HasValue ?
                new ObjectParameter("Cooperation", cooperation) :
                new ObjectParameter("Cooperation", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var hourlyRateDateFromOrToParameter = hourlyRateDateFromOrTo.HasValue ?
                new ObjectParameter("HourlyRateDateFromOrTo", hourlyRateDateFromOrTo) :
                new ObjectParameter("HourlyRateDateFromOrTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateContract_Result>("InsertUpdateContract", contractIdParameter, workerIdParameter, jobIdParameter, hourlyRateParameter, fixedRateParameter, estimatedDurationParameter, weeklyHourLimitParameter, timeUnitIdParameter, contractStatusIdParameter, endDateParameter, endReasonParameter, createdModifiedByUserIdParameter, isEndingContractParameter, userRatingIdParameter, skillParameter, qualityParameter, availabilityParameter, deadlineParameter, communicationParameter, cooperationParameter, commentParameter, userIdParameter, hourlyRateDateFromOrToParameter);
        }
    
        public virtual int insertupdatejob(Nullable<long> jobId, string jobTitle, string jobDescription, Nullable<bool> isActive, Nullable<bool> isHiringClosed, Nullable<long> workerTypeId, Nullable<long> experienceLevelId, Nullable<long> jobTypeId, Nullable<long> jobSubCategoryId, string skillsRequiredForJob, Nullable<System.DateTime> jobStartDate, Nullable<System.DateTime> jobEndDate, Nullable<decimal> estimatedDuration, Nullable<long> timeUnitId, string clientId, string jobAttachments, Nullable<decimal> min_PRF_Rate, Nullable<decimal> max_PRF_Rate, Nullable<decimal> fixedRate, string locality_PRF)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isHiringClosedParameter = isHiringClosed.HasValue ?
                new ObjectParameter("IsHiringClosed", isHiringClosed) :
                new ObjectParameter("IsHiringClosed", typeof(bool));
    
            var workerTypeIdParameter = workerTypeId.HasValue ?
                new ObjectParameter("WorkerTypeId", workerTypeId) :
                new ObjectParameter("WorkerTypeId", typeof(long));
    
            var experienceLevelIdParameter = experienceLevelId.HasValue ?
                new ObjectParameter("ExperienceLevelId", experienceLevelId) :
                new ObjectParameter("ExperienceLevelId", typeof(long));
    
            var jobTypeIdParameter = jobTypeId.HasValue ?
                new ObjectParameter("JobTypeId", jobTypeId) :
                new ObjectParameter("JobTypeId", typeof(long));
    
            var jobSubCategoryIdParameter = jobSubCategoryId.HasValue ?
                new ObjectParameter("JobSubCategoryId", jobSubCategoryId) :
                new ObjectParameter("JobSubCategoryId", typeof(long));
    
            var skillsRequiredForJobParameter = skillsRequiredForJob != null ?
                new ObjectParameter("SkillsRequiredForJob", skillsRequiredForJob) :
                new ObjectParameter("SkillsRequiredForJob", typeof(string));
    
            var jobStartDateParameter = jobStartDate.HasValue ?
                new ObjectParameter("JobStartDate", jobStartDate) :
                new ObjectParameter("JobStartDate", typeof(System.DateTime));
    
            var jobEndDateParameter = jobEndDate.HasValue ?
                new ObjectParameter("JobEndDate", jobEndDate) :
                new ObjectParameter("JobEndDate", typeof(System.DateTime));
    
            var estimatedDurationParameter = estimatedDuration.HasValue ?
                new ObjectParameter("EstimatedDuration", estimatedDuration) :
                new ObjectParameter("EstimatedDuration", typeof(decimal));
    
            var timeUnitIdParameter = timeUnitId.HasValue ?
                new ObjectParameter("TimeUnitId", timeUnitId) :
                new ObjectParameter("TimeUnitId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var jobAttachmentsParameter = jobAttachments != null ?
                new ObjectParameter("JobAttachments", jobAttachments) :
                new ObjectParameter("JobAttachments", typeof(string));
    
            var min_PRF_RateParameter = min_PRF_Rate.HasValue ?
                new ObjectParameter("Min_PRF_Rate", min_PRF_Rate) :
                new ObjectParameter("Min_PRF_Rate", typeof(decimal));
    
            var max_PRF_RateParameter = max_PRF_Rate.HasValue ?
                new ObjectParameter("Max_PRF_Rate", max_PRF_Rate) :
                new ObjectParameter("Max_PRF_Rate", typeof(decimal));
    
            var fixedRateParameter = fixedRate.HasValue ?
                new ObjectParameter("FixedRate", fixedRate) :
                new ObjectParameter("FixedRate", typeof(decimal));
    
            var locality_PRFParameter = locality_PRF != null ?
                new ObjectParameter("Locality_PRF", locality_PRF) :
                new ObjectParameter("Locality_PRF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertupdatejob", jobIdParameter, jobTitleParameter, jobDescriptionParameter, isActiveParameter, isHiringClosedParameter, workerTypeIdParameter, experienceLevelIdParameter, jobTypeIdParameter, jobSubCategoryIdParameter, skillsRequiredForJobParameter, jobStartDateParameter, jobEndDateParameter, estimatedDurationParameter, timeUnitIdParameter, clientIdParameter, jobAttachmentsParameter, min_PRF_RateParameter, max_PRF_RateParameter, fixedRateParameter, locality_PRFParameter);
        }
    
        public virtual int InsertUpdateUserProfile(Nullable<long> userProfileId, string profileTitle, string userSkillIds, string userLanguageIds, Nullable<decimal> userHourlyRate, string educationXML, string userSubCategoryIds, string userId, string address1, string address2, string city1, string city2, string country1, string country2, string homePhone, string workPhone, string cellPhone, string profilePic, string timeZone, string gender, Nullable<System.DateTime> dateOfBirth, string certificationDetailXML, string introductionVideo)
        {
            var userProfileIdParameter = userProfileId.HasValue ?
                new ObjectParameter("UserProfileId", userProfileId) :
                new ObjectParameter("UserProfileId", typeof(long));
    
            var profileTitleParameter = profileTitle != null ?
                new ObjectParameter("ProfileTitle", profileTitle) :
                new ObjectParameter("ProfileTitle", typeof(string));
    
            var userSkillIdsParameter = userSkillIds != null ?
                new ObjectParameter("UserSkillIds", userSkillIds) :
                new ObjectParameter("UserSkillIds", typeof(string));
    
            var userLanguageIdsParameter = userLanguageIds != null ?
                new ObjectParameter("UserLanguageIds", userLanguageIds) :
                new ObjectParameter("UserLanguageIds", typeof(string));
    
            var userHourlyRateParameter = userHourlyRate.HasValue ?
                new ObjectParameter("UserHourlyRate", userHourlyRate) :
                new ObjectParameter("UserHourlyRate", typeof(decimal));
    
            var educationXMLParameter = educationXML != null ?
                new ObjectParameter("EducationXML", educationXML) :
                new ObjectParameter("EducationXML", typeof(string));
    
            var userSubCategoryIdsParameter = userSubCategoryIds != null ?
                new ObjectParameter("UserSubCategoryIds", userSubCategoryIds) :
                new ObjectParameter("UserSubCategoryIds", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var city1Parameter = city1 != null ?
                new ObjectParameter("City1", city1) :
                new ObjectParameter("City1", typeof(string));
    
            var city2Parameter = city2 != null ?
                new ObjectParameter("City2", city2) :
                new ObjectParameter("City2", typeof(string));
    
            var country1Parameter = country1 != null ?
                new ObjectParameter("Country1", country1) :
                new ObjectParameter("Country1", typeof(string));
    
            var country2Parameter = country2 != null ?
                new ObjectParameter("Country2", country2) :
                new ObjectParameter("Country2", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("ProfilePic", profilePic) :
                new ObjectParameter("ProfilePic", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var certificationDetailXMLParameter = certificationDetailXML != null ?
                new ObjectParameter("CertificationDetailXML", certificationDetailXML) :
                new ObjectParameter("CertificationDetailXML", typeof(string));
    
            var introductionVideoParameter = introductionVideo != null ?
                new ObjectParameter("IntroductionVideo", introductionVideo) :
                new ObjectParameter("IntroductionVideo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUserProfile", userProfileIdParameter, profileTitleParameter, userSkillIdsParameter, userLanguageIdsParameter, userHourlyRateParameter, educationXMLParameter, userSubCategoryIdsParameter, userIdParameter, address1Parameter, address2Parameter, city1Parameter, city2Parameter, country1Parameter, country2Parameter, homePhoneParameter, workPhoneParameter, cellPhoneParameter, profilePicParameter, timeZoneParameter, genderParameter, dateOfBirthParameter, certificationDetailXMLParameter, introductionVideoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsEmailAddressAlreadyExists(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsEmailAddressAlreadyExists", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsUserNameAlreadyExists(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsUserNameAlreadyExists", userNameParameter);
        }
    
        public virtual int JobRequestDenied(Nullable<long> jobBidId)
        {
            var jobBidIdParameter = jobBidId.HasValue ?
                new ObjectParameter("JobBidId", jobBidId) :
                new ObjectParameter("JobBidId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobRequestDenied", jobBidIdParameter);
        }
    
        public virtual int RejectCapture(string captureIdsToReject, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var captureIdsToRejectParameter = captureIdsToReject != null ?
                new ObjectParameter("CaptureIdsToReject", captureIdsToReject) :
                new ObjectParameter("CaptureIdsToReject", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RejectCapture", captureIdsToRejectParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int RejectContract(Nullable<long> contractId, string modifiedByUserId, string endReason)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var modifiedByUserIdParameter = modifiedByUserId != null ?
                new ObjectParameter("ModifiedByUserId", modifiedByUserId) :
                new ObjectParameter("ModifiedByUserId", typeof(string));
    
            var endReasonParameter = endReason != null ?
                new ObjectParameter("EndReason", endReason) :
                new ObjectParameter("EndReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RejectContract", contractIdParameter, modifiedByUserIdParameter, endReasonParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ResetPassword(string forgotPasswordToken, string newPassword)
        {
            var forgotPasswordTokenParameter = forgotPasswordToken != null ?
                new ObjectParameter("ForgotPasswordToken", forgotPasswordToken) :
                new ObjectParameter("ForgotPasswordToken", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ResetPassword", forgotPasswordTokenParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<SetForgotPasswordToken_Result> SetForgotPasswordToken(string forgotPasswordToken, string emailAddress)
        {
            var forgotPasswordTokenParameter = forgotPasswordToken != null ?
                new ObjectParameter("ForgotPasswordToken", forgotPasswordToken) :
                new ObjectParameter("ForgotPasswordToken", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SetForgotPasswordToken_Result>("SetForgotPasswordToken", forgotPasswordTokenParameter, emailAddressParameter);
        }
    
        public virtual int UpdateMessageViewedStatus(string userId, Nullable<long> jobId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMessageViewedStatus", userIdParameter, jobIdParameter);
        }
    
        public virtual int UpdateNotificationViewedStatus(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNotificationViewedStatus", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> VerifyEmailAddress(string verificationCode)
        {
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("VerifyEmailAddress", verificationCodeParameter);
        }
    
        public virtual ObjectResult<WorkerHourlyReportByWorkerId_Result> WorkerHourlyReportByWorkerId(string workerId, Nullable<System.DateTime> date)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerHourlyReportByWorkerId_Result>("WorkerHourlyReportByWorkerId", workerIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<WorkerHourlyReportByWorkerIdAndClientId_Result> WorkerHourlyReportByWorkerIdAndClientId(string workerId, Nullable<System.DateTime> date, Nullable<long> jobId, string clientId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerHourlyReportByWorkerIdAndClientId_Result>("WorkerHourlyReportByWorkerIdAndClientId", workerIdParameter, dateParameter, jobIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<WorkerWeeklyReportByWorkerId_Result> WorkerWeeklyReportByWorkerId(string workerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> jobId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerWeeklyReportByWorkerId_Result>("WorkerWeeklyReportByWorkerId", workerIdParameter, fromDateParameter, toDateParameter, jobIdParameter);
        }
    
        public virtual ObjectResult<WorkerWeeklyReportByWorkerIdAndClientId_Result> WorkerWeeklyReportByWorkerIdAndClientId(string workerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> jobId, string clientId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerWeeklyReportByWorkerIdAndClientId_Result>("WorkerWeeklyReportByWorkerIdAndClientId", workerIdParameter, fromDateParameter, toDateParameter, jobIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<WorkerYearlyReportByWorkerId_Result> WorkerYearlyReportByWorkerId(string workerId, Nullable<int> year, Nullable<long> jobId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerYearlyReportByWorkerId_Result>("WorkerYearlyReportByWorkerId", workerIdParameter, yearParameter, jobIdParameter);
        }
    
        public virtual ObjectResult<WorkerYearlyReportByWorkerIdAndClientId_Result> WorkerYearlyReportByWorkerIdAndClientId(string workerId, Nullable<int> year, Nullable<long> jobId, string clientId)
        {
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkerYearlyReportByWorkerIdAndClientId_Result>("WorkerYearlyReportByWorkerIdAndClientId", workerIdParameter, yearParameter, jobIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<WorkSummaryOfClientByClientId_Result> WorkSummaryOfClientByClientId(string clientId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkSummaryOfClientByClientId_Result>("WorkSummaryOfClientByClientId", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int UpdateContractForWorker(Nullable<long> contractId, Nullable<decimal> hourlyRate, Nullable<decimal> fixedRate, Nullable<decimal> weeklyHourLimit, string endReason, Nullable<bool> isEndingContract, Nullable<decimal> skill, Nullable<decimal> quality, Nullable<decimal> availability, Nullable<decimal> deadline, Nullable<decimal> communication, Nullable<decimal> cooperation, string comment, string userId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var fixedRateParameter = fixedRate.HasValue ?
                new ObjectParameter("FixedRate", fixedRate) :
                new ObjectParameter("FixedRate", typeof(decimal));
    
            var weeklyHourLimitParameter = weeklyHourLimit.HasValue ?
                new ObjectParameter("WeeklyHourLimit", weeklyHourLimit) :
                new ObjectParameter("WeeklyHourLimit", typeof(decimal));
    
            var endReasonParameter = endReason != null ?
                new ObjectParameter("EndReason", endReason) :
                new ObjectParameter("EndReason", typeof(string));
    
            var isEndingContractParameter = isEndingContract.HasValue ?
                new ObjectParameter("IsEndingContract", isEndingContract) :
                new ObjectParameter("IsEndingContract", typeof(bool));
    
            var skillParameter = skill.HasValue ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(decimal));
    
            var qualityParameter = quality.HasValue ?
                new ObjectParameter("Quality", quality) :
                new ObjectParameter("Quality", typeof(decimal));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(decimal));
    
            var deadlineParameter = deadline.HasValue ?
                new ObjectParameter("Deadline", deadline) :
                new ObjectParameter("Deadline", typeof(decimal));
    
            var communicationParameter = communication.HasValue ?
                new ObjectParameter("Communication", communication) :
                new ObjectParameter("Communication", typeof(decimal));
    
            var cooperationParameter = cooperation.HasValue ?
                new ObjectParameter("Cooperation", cooperation) :
                new ObjectParameter("Cooperation", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContractForWorker", contractIdParameter, hourlyRateParameter, fixedRateParameter, weeklyHourLimitParameter, endReasonParameter, isEndingContractParameter, skillParameter, qualityParameter, availabilityParameter, deadlineParameter, communicationParameter, cooperationParameter, commentParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetNotificationByUserId_Result> GetNotificationByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationByUserId_Result>("GetNotificationByUserId", userIdParameter);
        }
    
        public virtual int InsertNotification(Nullable<long> contractId, string workerId, Nullable<long> jobId, string notificationText)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("ContractId", contractId) :
                new ObjectParameter("ContractId", typeof(long));
    
            var workerIdParameter = workerId != null ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var notificationTextParameter = notificationText != null ?
                new ObjectParameter("NotificationText", notificationText) :
                new ObjectParameter("NotificationText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNotification", contractIdParameter, workerIdParameter, jobIdParameter, notificationTextParameter);
        }
    }
}
